import datetime

from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message

from get_any_data import get_cities, get_destination_id, hotels


def get_list_cities(message: Message, bot: TeleBot, sort_order: str) -> None:
    """
    –ü–û–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    :param message:
    :param bot:
    :param sort_order:
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    rmk = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(message.chat.id, '–î—É–º–∞—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    cities = get_cities(message.text)
    if not cities:
        msg = bot.reply_to(message, '–í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùóÔ∏è')
        bot.register_next_step_handler(msg, get_list_cities, bot=bot, sort_order=sort_order)
        return
    for el in cities:
        rmk.add(KeyboardButton(el))
    city = bot.send_message(message.chat.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=rmk)
    bot.register_next_step_handler(city, get_city_by_destination_id, bot=bot, sort_order=sort_order)


def get_city_by_destination_id(message: Message, bot: TeleBot, sort_order: str) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    :param message:
    :param bot:
    :param sort_order:
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥—É, –≤—Å—ë —É—Ç–æ—á–Ω—é ‚è≥')
    destination_id = get_destination_id(message.text)

    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(1, 11):
        reply_markup.add(KeyboardButton(i))

    count_hotels = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π\n'
                                                     '(–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è', reply_markup=reply_markup)
    bot.register_next_step_handler(count_hotels, get_date, bot=bot, destination_id=destination_id,
                                   sort_order=sort_order)


def get_date(message: Message, bot: TeleBot, destination_id: str, sort_order: str) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ - –≤—ã–µ–∑–¥–∞
    :param message:
    :param bot:
    :param destination_id:
    :param sort_order:
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    count_hotels = message.text
    if not count_hotels.isdigit() or not 10 >= int(count_hotels) > 0:
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π (–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è')
        bot.register_next_step_handler(msg, get_date, bot=bot, sort_order=sort_order, destination_id=destination_id)
        return
    date = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è-–¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞.\n'
                                             '–ü—Ä–∏–º–µ—Ä, 2020.12.31-2021.01.31 ')
    if sort_order == 'DISTANCE_FROM_LANDMARK':
        bot.register_next_step_handler(date, get_price, bot=bot, count_hotels=count_hotels,
                                       destination_id=destination_id)
        return
    bot.register_next_step_handler(date, get_hotels, bot=bot, count_hotels=count_hotels,
                                   destination_id=destination_id, sort_order=sort_order)


def get_hotels(message: Message, bot: TeleBot, count_hotels: str, destination_id, sort_order: str) -> None:
    """
    –í—ã–¥–∞—á–∞ —é–∑–µ—Ä—É –æ—Ç–µ–ª–µ–π
    :param message:
    :param bot:
    :param count_hotels:
    :param destination_id:
    :param sort_order:
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    dates = check_date(message=message)
    if not dates:
        msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã‚ùóÔ∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π‚ùóÔ∏è\n'
                                    '–ü—Ä–∏–º–µ—Ä, 2020.12.31-2021.01.31')
        bot.register_next_step_handler(msg, get_hotels, bot=bot, count_hotels=count_hotels,
                                       destination_id=destination_id,
                                       sort_order=sort_order)
        return
    bot.send_message(message.chat.id, '–ú–∏–Ω—É—Ç–∫—É')
    my_hotels = hotels(destination_id, page_size=count_hotels, sort_order=sort_order,
                       date_in=dates[0].date(), date_out=dates[1].date())
    if my_hotels:
        for hotel in my_hotels:
            bot.send_message(message.chat.id,
                             '–ù–∞–∑–≤–∞–Ω–∏–µ üè® - {0}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ ‚≠êÔ∏è- {1}\n–ê–¥—Ä–µ—Å üåÜ- {2}\n'
                             '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ üöò- {3}\n'
                             '–¶–µ–Ω–∞ üíµ - {4}'.format(*hotel))
    else:
        bot.send_message(message.chat.id, '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚òπÔ∏è')


# –ù–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã bestdeal

def get_price(message: Message, bot: TeleBot, destination_id: str, count_hotels: str) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    :param message:
    :param bot:
    :param count_hotels:
    :param destination_id:
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    dates = check_date(message=message)
    if not dates:
        msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã‚ùóÔ∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π‚ùóÔ∏è\n'
                                    '–ü—Ä–∏–º–µ—Ä, 2020.12.31-2021.01.31')
        bot.register_next_step_handler(msg, get_price, bot=bot, count_hotels=count_hotels,
                                       destination_id=destination_id, )
        return
    price = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö üí∞üí∞üí∞\n'
                                              '–ü—Ä–∏–º–µ—Ä, 5000-10000')
    bot.register_next_step_handler(price, get_distance, bot=bot, destination_id=destination_id,
                                   dates=dates, count_hotels=count_hotels)


def get_distance(message: Message, bot: TeleBot, destination_id: str,
                 dates: tuple, count_hotels) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    :param message:
    :param bot:
    :param count_hotels:
    :param destination_id:
    :param dates:
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    price = tuple(map(int, filter(lambda x: x.isdigit(), message.text.split('-'))))
    if len(price) != 2 or price[0] > price[1] or price[0] <= 0 or price[1] <= 0:
        msg = bot.reply_to(message, '–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ‚ùóÔ∏è\n'
                                    '–ü—Ä–∏–º–µ—Ä, 5000-10000')
        bot.register_next_step_handler(msg, get_distance, bot=bot, destination_id=destination_id,
                                       dates=dates, count_hotels=count_hotels)
        return

    distance = bot.send_message(message.chat.id,
                                '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –∫–º) –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ '
                                '–∑–∞–¥–∞–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä, 5')
    bot.register_next_step_handler(distance, get_hotels_for_best_deal, bot=bot, destination_id=destination_id,
                                   dates=dates, price=price, count_hotels=count_hotels)


def get_hotels_for_best_deal(message: Message, bot: TeleBot, destination_id: str,
                             dates: tuple, count_hotels: str, price: tuple) -> None:
    """
    –í—ã–¥–∞—á–∞ —é–∑–µ—Ä—É –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /bestdeal
    :return:
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...')
        return
    distance = message.text
    if not distance.isdigit() or float(distance) < 0:
        msg = bot.reply_to(message, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ‚ùóÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, get_hotels_for_best_deal, bot=bot, destination_id=destination_id,
                                       dates=dates, price=price, count_hotels=count_hotels)
        return
    bot.send_message(message.chat.id, '–ú–∏–Ω—É—Ç–∫—É ü¶ñ')
    my_hotels = hotels(destination_id, page_size=count_hotels, sort_order='DISTANCE_FROM_LANDMARK',
                       date_in=dates[0].date(), date_out=dates[1].date(), price_min=price[0], price_max=price[1],
                       distance_from_centr=float(distance))
    if my_hotels:
        for hotel in my_hotels:
            bot.send_message(message.chat.id,
                             '–ù–∞–∑–≤–∞–Ω–∏–µ üè® - {0}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ ‚≠êÔ∏è- {1}\n–ê–¥—Ä–µ—Å üåÜ- {2}\n'
                             '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ üöò- {3}\n'
                             '–¶–µ–Ω–∞ üíµ - {4}'.format(*hotel))
    else:
        bot.send_message(message.chat.id, '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòû')


def check_date(message: Message) -> tuple or list:
    """
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –≤–≤–µ–¥–µ–Ω–æ–π –æ—Ç —é–∑–µ—Ä–∞
    :param message:
    :return:
    """
    dates = []
    today = datetime.datetime.today()
    try:
        dates = tuple(filter(lambda x: x > today, map(lambda y: datetime.datetime.strptime(y, '%Y.%m.%d'),
                                                      message.text.split('-'))))
    finally:
        return dates
