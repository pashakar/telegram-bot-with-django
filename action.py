import datetime

from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery
from telebot_calendar import Calendar, CallbackData, RUSSIAN_LANGUAGE

from get_any_data import get_cities, get_destination_id, hotels

calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_1_callback = CallbackData("calendar_1", "action", "year", "month", "day")
calendar_2_callback = CallbackData("calendar_2", "action", "year", "month", "day")

STOP_MESSAGE = '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...'

data_user_dict = {}


class DataUser:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–µ–Ω—ã—Ö —é–∑–µ—Ä–æ–º
    """

    def __init__(self, name):
        self.name = name
        self.count_hotels = None
        self.destination_id = None
        self.bot = None
        self.sort_order = None
        self.price = None
        self.distance = None
        self.date_in = None
        self.date_out = None


def get_list_cities(message: Message, **kwargs) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    :param message:
    :return:
    """
    data_user = DataUser(name=message.from_user.first_name)
    data_user_dict[message.chat.id] = data_user
    bot = data_user.bot = kwargs['bot']
    sort_order = data_user.sort_order = kwargs['sort_order']

    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, STOP_MESSAGE)
        return

    rmk = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(message.chat.id, '–î—É–º–∞—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    cities = get_cities(message.text)
    if not cities:
        msg = bot.reply_to(message, '–í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ‚ùóÔ∏è')
        bot.register_next_step_handler(msg, get_list_cities, bot=bot, sort_order=sort_order)
        return

    for el in cities:
        rmk.add(KeyboardButton(el))

    city = bot.send_message(message.chat.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=rmk)
    bot.register_next_step_handler(city, get_city_by_destination_id)


def get_city_by_destination_id(message: Message) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    :param message:
    :return:
    """
    data_user = data_user_dict.get(message.chat.id)
    bot = data_user.bot

    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, STOP_MESSAGE)
        return

    bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥—É, –≤—Å—ë —É—Ç–æ—á–Ω—é ‚è≥')
    destination_id = get_destination_id(message.text)
    data_user.destination_id = destination_id

    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(1, 11):
        reply_markup.add(KeyboardButton(i))

    count_hotels = bot.send_message(
        message.chat.id,
        '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π\n(–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è',
        reply_markup=reply_markup
    )
    if data_user.sort_order == 'DISTANCE_FROM_LANDMARK':
        bot.register_next_step_handler(count_hotels, get_price)
        return
    bot.register_next_step_handler(count_hotels, get_date_in)


def get_date_in(message: Message) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ - –≤—ã–µ–∑–¥–∞
    :param message:
    :return:
    """
    data_user = data_user_dict.get(message.chat.id)
    bot = data_user.bot
    now = datetime.datetime.now()

    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, STOP_MESSAGE)
        return

    if not data_user.price:
        count_hotels = message.text
        if check_count(count_hotels):
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π (–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è')
            bot.register_next_step_handler(msg, get_date_in)
            return
        data_user.count_hotels = count_hotels

    distance = message.text
    if not distance.isdigit() or float(distance) < 0:
        msg = bot.reply_to(message, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ‚ùó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, get_date_in)
        return

    data_user.distance = float(distance)
    data_user.bot.send_message(
        message.chat.id,
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è',
        reply_markup=calendar.create_calendar(
            name=calendar_1_callback.prefix, year=now.year, month=now.month
        )
    )


def get_hotels(call: CallbackQuery) -> None:
    """
    –í—ã–¥–∞—á–∞ —é–∑–µ—Ä—É –æ—Ç–µ–ª–µ–π
    :return:
    """
    data_user = data_user_dict[call.from_user.id]
    bot = data_user.bot
    if data_user.sort_order == 'DISTANCE_FROM_LANDMARK':
        my_hotels = hotels(
            destination_id=data_user.destination_id,
            page_size=data_user.count_hotels,
            sort_order=data_user.sort_order,
            date_in=data_user.date_in.date(),
            date_out=data_user.date_out.date(),
            price_min=data_user.price[0],
            price_max=data_user.price[1],
            distance_from_centr=data_user.distance
        )
    else:
        my_hotels = hotels(
            destination_id=data_user.destination_id,
            page_size=data_user.count_hotels,
            sort_order=data_user.sort_order,
            date_in=data_user.date_in.date(),
            date_out=data_user.date_out.date()
        )
    if not my_hotels:
        bot.send_message(call.from_user.id, '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚òπÔ∏è')
        return
    for hotel in my_hotels:
        bot.send_message(
            call.from_user.id,
            '–ù–∞–∑–≤–∞–Ω–∏–µ üè® - {0}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ ‚≠êÔ∏è- {1}\n–ê–¥—Ä–µ—Å üåÜ- {2}\n'
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ üöò- {3}\n'
            '–¶–µ–Ω–∞ üíµ - {4}'.format(*hotel)
        )


# –ù–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã bestdeal

def get_price(message: Message) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    :param message:
    :return:
    """
    data_user = data_user_dict[message.from_user.id]
    bot = data_user.bot

    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, STOP_MESSAGE)
        return
    count_hotels = message.text
    if check_count(count_hotels):
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π (–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è')
        bot.register_next_step_handler(msg, get_price)
        return
    data_user.count_hotels = message.text

    price = bot.send_message(
        message.chat.id,
        '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö üí∞üí∞üí∞\n–ü—Ä–∏–º–µ—Ä, 5000-10000'
    )
    bot.register_next_step_handler(price, get_distance)


def get_distance(message: Message) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    :param message:
    :return:
    """
    data_user = data_user_dict[message.chat.id]
    bot = data_user.bot

    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, STOP_MESSAGE)
        return

    price = tuple(map(int, filter(lambda x: x.isdigit(), message.text.split('-'))))
    correct_price = len(price) == 2 and price[1] > price[0] and all(i > 0 for i in price)

    if not correct_price:
        msg = bot.reply_to(
            message, '–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ‚ùóÔ∏è\n'
                     '–ü—Ä–∏–º–µ—Ä, 5000-10000 \n'
                     '–ù–∞–∏–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
        )
        bot.register_next_step_handler(msg, get_distance)
        return

    data_user.price = price
    msg = bot.send_message(
        message.chat.id,
        '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –∫–º) –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ '
        '–∑–∞–¥–∞–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä, 5'
    )

    bot.register_next_step_handler(msg, get_date_in)


def check_count(count_hotels):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π
    :param count_hotels:
    :return:
    """
    return not count_hotels.isdigit() or not 10 >= int(count_hotels) > 0
