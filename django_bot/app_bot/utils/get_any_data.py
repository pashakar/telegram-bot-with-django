import logging

import requests
from bs4 import BeautifulSoup
from django.conf import settings

HEADERS = settings.HEADERS

logger = logging.getLogger(__name__)


def log_errors(func):

    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as exc:
            logger.error(f'ERROR: {exc}')
            raise exc

    return wrapper


@log_errors
def get_cities(city: str) -> list or None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    :param city: –≥–æ—Ä–æ–¥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º
    :return: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –≥–æ—Ä–æ–¥ —é–∑–µ—Ä–∞
    """
    data = prepare(city)
    data = data['suggestions'][0]['entities']
    cities = [BeautifulSoup(city['caption'], features='html.parser').getText() for city in data]
    return cities if cities else None


@log_errors
def get_destination_id(city: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –≥–æ—Ä–æ–¥–∞
    :param city: –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø–æ–∏—Å–∫
    :return: id –≥–æ—Ä–æ–¥–∞
    """
    data = prepare(city)
    destination_id = data['suggestions'][0]['entities'][0]['destinationId']
    return destination_id


@log_errors
def hotels(destination_id: str, page_size: str, sort_order: str, date_in, date_out,
           distance_from_centr=None, price_min=None, price_max=None) -> list or str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ
    :param destination_id: id –≥–æ—Ä–æ–¥–∞
    :param sort_order: —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    :param distance_from_centr: —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    :param date_in: –¥–∞—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
    :param price_min: –º–∏–Ω-–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
    :param price_max: –º–∞–∫—Å-–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
    :param date_out: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
    :param page_size: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –º–∞–∫—Å–∏–º—É–º 25,
     —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π —é–∑–µ—Ä—É
    :return: —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π
    """
    url = "https://hotels4.p.rapidapi.com/properties/list"

    querystring = {
        "adults1": "1",
        "pageNumber": "1",
        "destinationId": destination_id,
        "pageSize": page_size,
        "checkOut": date_out,
        "checkIn": date_in,
        "sortOrder": sort_order,
        "locale": "ru_RU",
        "currency": "RUB"
    }

    if price_min and price_max:
        querystring['priceMin'], querystring['priceMax'] = int(price_min), int(price_max)
    response = requests.request("GET", url, headers=HEADERS, params=querystring)
    if response.status_code != 200:
        logger.error(f'{response.status_code}: {response.text}')
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ –Ω–µ —Ö–æ—Ä–æ—à–æ('
    data = response.json()['data']['body']['searchResults']['results']

    h = []
    for el in data:
        distance = el.get('landmarks')[0]['distance'][:3]
        if distance_from_centr and distance_from_centr >= float(distance.replace(',', '.')):
            h.append(get_properties(el, distance))
        else:
            h.append(get_properties(el, distance))
    return h


@log_errors
def get_properties(el: dict, distance: str) -> list:
    properties = [
        el.get('name'), el.get('starRating', 0), el.get('address').get('streetAddress'), distance,
    ]
    properties.append(str(el.get('ratePlan').get('price').get('exactCurrent')) + ' —Ä—É–±.') if el.get(
        'ratePlan') else '—Ü–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ ü§´'
    return properties


@log_errors
def prepare(city: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞
    :param city: –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞
    :return:
    """
    url = "https://hotels4.p.rapidapi.com/locations/search"
    querystring = {"query": city, "locale": "ru_RU"}
    response = requests.request("GET", url, headers=HEADERS, params=querystring)
    if response.status_code != 200:
        logger.error(f'{response.status_code}: {response.text}')
        raise Exception
    return response.json()
