import datetime

from app_bot.models import DataUser
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from telebot_calendar import Calendar, CallbackData, RUSSIAN_LANGUAGE
from telebot import TeleBot

from .get_any_data import get_cities, get_destination_id, hotels

calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_1_callback = CallbackData("calendar_1", "action", "year", "month", "day")
calendar_2_callback = CallbackData("calendar_2", "action", "year", "month", "day")

STOP_MESSAGE = '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É üìõ...'


class Action:

    def __init__(self, message: Message or CallbackQuery, bot: TeleBot):
        self.bot = bot
        self.data_user = DataUser.objects.get(pk=message.from_user.id)

    def get_list_cities(self, message: Message, **kwargs) -> None:
        self.data_user.sort_order = kwargs['sort_order']
        self.data_user.save(update_fields=['sort_order'])
        if message.text.lower() == '—Å—Ç–æ–ø':
            self.bot.send_message(message.chat.id, STOP_MESSAGE)
            return
        rmk = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        self.bot.send_message(message.chat.id, '–î—É–º–∞—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        cities = get_cities(message.text)
        if not cities:
            msg = self.bot.reply_to(message, '–í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ‚ùóÔ∏è')
            self.bot.register_next_step_handler(msg, self.get_list_cities)
            return
        for el in cities:
            rmk.add(KeyboardButton(el))
        city = self.bot.send_message(message.chat.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=rmk)
        self.bot.register_next_step_handler(city, self.get_city_by_destination_id)

    def get_city_by_destination_id(self, message: Message) -> None:
        if message.text.lower() == '—Å—Ç–æ–ø':
            self.bot.send_message(message.chat.id, STOP_MESSAGE)
            return
        self.bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥—É, –≤—Å—ë —É—Ç–æ—á–Ω—é ‚è≥')
        self.data_user.destination_id = get_destination_id(message.text)
        self.data_user.save(update_fields=['destination_id'])
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(1, 11):
            reply_markup.add(KeyboardButton(i))
        count_hotels = self.bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π\n(–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è',
            reply_markup=reply_markup
        )
        if self.data_user.sort_order == 'DISTANCE_FROM_LANDMARK':
            self.bot.register_next_step_handler(count_hotels, self.get_price)
            return
        self.bot.register_next_step_handler(count_hotels, self.get_date_in)

    def get_date_in(self, message: Message) -> None:
        if message.text.lower() == '—Å—Ç–æ–ø':
            self.bot.send_message(message.chat.id, STOP_MESSAGE)
            return
        if self.data_user.sort_order == 'DISTANCE_FROM_LANDMARK':
            if not message.text.isdigit() or float(message.text) < 0:
                msg = self.bot.reply_to(message, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ‚ùó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                self.bot.register_next_step_handler(msg, self.get_date_in)
                return
            self.data_user.distance = float(message.text)
            self.data_user.save(update_fields=['distance'])
        else:
            if self.check_count(message.text):
                msg = self.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π (–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è')
                self.bot.register_next_step_handler(msg, self.get_date_in)
                return
            self.data_user.count_hotels = message.text
            self.data_user.save(update_fields=['count_hotels'])
        self.send_calendar(message=message)

    def send_calendar(self, message) -> None:
        now = datetime.datetime.now()
        self.bot.send_message(
            message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è',
            reply_markup=calendar.create_calendar(
                name=calendar_1_callback.prefix, year=now.year, month=now.month
            ))

    def get_hotels(self, call: CallbackQuery, ) -> None:
        if self.data_user.sort_order == 'DISTANCE_FROM_LANDMARK':
            my_hotels = hotels(
                destination_id=self.data_user.destination_id,
                page_size=self.data_user.count_hotels,
                sort_order=self.data_user.sort_order,
                date_in=self.data_user.date_in,
                date_out=self.data_user.date_out,
                price_min=self.data_user.price_min,
                price_max=self.data_user.price_max,
                distance_from_centr=self.data_user.distance
            )
        else:
            my_hotels = hotels(
                destination_id=self.data_user.destination_id,
                page_size=self.data_user.count_hotels,
                sort_order=self.data_user.sort_order,
                date_in=self.data_user.date_in,
                date_out=self.data_user.date_out
            )
        if not my_hotels:
            self.bot.send_message(call.from_user.id, '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚òπÔ∏è')
            return
        for hotel in my_hotels:
            self.bot.send_message(
                call.from_user.id,
                '–ù–∞–∑–≤–∞–Ω–∏–µ üè® - {0}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ ‚≠êÔ∏è- {1}\n–ê–¥—Ä–µ—Å üåÜ- {2}\n'
                '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ üöò- {3}\n'
                '–¶–µ–Ω–∞ üíµ - {4}'.format(*hotel)
            )

    def get_price(self, message: Message) -> None:
        if message.text.lower() == '—Å—Ç–æ–ø':
            self.bot.send_message(message.chat.id, STOP_MESSAGE)
            return
        if self.check_count(message.text):
            msg = self.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π (–Ω–µ –±–æ–ª—å—à–µ 10) ‚ùóÔ∏è')
            self.bot.register_next_step_handler(msg, self.get_price)
            return
        self.data_user.count_hotels = message.text
        self.data_user.save(update_fields=['count_hotels'])
        price = self.bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö üí∞üí∞üí∞\n–ü—Ä–∏–º–µ—Ä, 5000-10000'
        )
        self.bot.register_next_step_handler(price, self.get_distance)

    def get_distance(self, message: Message) -> None:
        if message.text.lower() == '—Å—Ç–æ–ø':
            self.bot.send_message(message.chat.id, STOP_MESSAGE)
            return
        price = tuple(map(int, filter(lambda x: x.isdigit(), message.text.split('-'))))
        correct_price = len(price) == 2 and price[1] > price[0] and all(i > 0 for i in price)
        if not correct_price:
            msg = self.bot.reply_to(
                message, '–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ‚ùóÔ∏è\n'
                         '–ü—Ä–∏–º–µ—Ä, 5000-10000 \n'
                         '–ù–∞–∏–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
            )
            self.bot.register_next_step_handler(msg, self.get_distance)
            return
        self.data_user.price_min, self.data_user.price_max = price
        self.data_user.save(update_fields=['price_min', 'price_max'])
        msg = self.bot.send_message(
            message.chat.id,
            '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –∫–º) –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ '
            '–∑–∞–¥–∞–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä, 5'
        )
        self.bot.register_next_step_handler(msg, self.get_date_in)

    @staticmethod
    def check_count(count_hotels) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π
        :param count_hotels:
        :return:
        """
        return not count_hotels.isdigit() or not 10 >= int(count_hotels) > 0
